#!/usr/bin/perl
use strict;
use warnings;

use Find::Lib './lib';
use Getopt::Long;
use AnyEvent();

use ControlFreak;
use Carp;
use Pod::Usage;
use Try::Tiny;

my %options;
GetOptions(
    "c|config=s" => \$options{config},
    "d|daemon"   => \$options{daemon},

    'h|help'     => \$options{help},
    'm|man'      => \$options{man},
);

pod2usage(1)             if $options{help};
pod2usage(-verbose => 2) if $options{man};

pod2usage("please provide a config file") unless $options{config};

croak "Config file doesn't exist" unless -e $options{config};
croak "Can't read config file"    unless -r $options{config};

my $ctrl = ControlFreak->new( config_file => $options{config} );

#try {
    $ctrl->load_config;
#} catch {
#    die "Fatal error while loading the config, see logs for details $!";
#};

if ($ctrl->console) {
    $ctrl->console->start;
}

## probably need to deal with signals
AnyEvent->condvar->recv;

__END__

=head1 NAME

cfk - the supervisor process for ControlFreak

=head1 SYNOPSIS

cfk [options]

Options:

 -c, --config=<file>  Path to a configuration file to use

 -d, --daemon         Run as a daemon
 -h, --help           Help
 -m, --man            More help

=head1 OPTIONS

Please see L<SYNOPSIS>.

=head1 DESCRIPTION

B<cfk> supervises other processes, making sure there are up or down
when you want to, and provides flexible logging facility for those
services.

=head1 SAMPLE CONFIG

  # management port
  console address = 127.0.0.1:11311
  console full = on # enable this only if you know what you are doing

  ## log configuration
  logger config = /etc/cfk/logger.conf

  service memcached cmd = /usr/bin/memcached -p 11211
  service memcached ignore_stderr = 1
  service memcached tags = prod
  service memcached-test cmd = /usr/bin/memcached -p 12221
  service memcached tags = test,optional
  service perlbal cmd = /usr/bin/perlbal -c /etc/perlbal.conf
  service perlbal tags = prod

  ## TODO
  socket fcgisock address = 127.0.0.1:8080
  socket fcgisock options = TBD

  ## webNNN share a common socket through their stdin
  service web001 cmd = /usr/bin/plackup -a /home/www/app.psgi -s FCGI
  service web001 pipe_stdin = fcgisock
  service web001 tags = prod,webs

  service web002 cmd = /usr/bin/plackup -a /home/www/app.psgi -s FCGI
  service web002 pipe_stdin = fcgisock
  service web002 tags = prod,webs

  # start random stuff
  command up svc memcached
  command up svc perlbal
  ## TODO
  command down tag optional

  ## TODO
  load /etc/cfk.d/*.conf

=head1 SAMPLE LOG CONFIG

B<ControlFreak> currently works with L<Log::Log4perl> framework which is
is incredibly flexible. You might have to install additional modules to get the
most of your logging experience (let's say if you want to be notified by
Instant Message of services going down).

There are two categories of logger:

=over 4

=item the main logger

This is the logger used by B<ControlFreak> itself, it allows to finely control
what do you want to log from what's happening in the daemon.

=item the service logger

This is a serie of loggers used by the different services. All services will
get by default their C<stdout> and C<stderr> aggregated and logged, unless
you specify the C<ignore_stderr> and C<ignore_stdout> options.

Each log event gets assigned the following log category:

  service.$service_name.$type

Where C<$service_name> is the name of your service ("worker001", "perlbal")
and $type is either C<err> or C<out>.

Obviously messages going to C<stderr> will be logged at level C<ERROR> while
messages on C<stdout> will be logged at C<INFO> level.

So there is a bit of redundancy in there but, this is what gets you the most
flexibility with log4perl.

=back

=head2 sample 1

    # daemon log to the main log
    log4perl.rootLogger=DEBUG, LOGFILE

    # all services to service logs...
    log4perl.logger.service=DEBUG, SVCFILE
    log4perl.additivity.service = 0

    # ...but gearman errors are also going to the screen
    log4perl.logger.service.gearmand=ERROR, SCREEN

    log4perl.appender.SCREEN=Log::Log4perl::Appender::Screen
    log4perl.appender.SCREEN.layout=PatternLayout
    log4perl.appender.SCREEN.layout.ConversionPattern=[gearman] %p %c - %m%n

    log4perl.appender.LOGFILE=Log::Log4perl::Appender::File
    log4perl.appender.LOGFILE.filename=/tmp/main.log
    log4perl.appender.LOGFILE.mode=append
    log4perl.appender.LOGFILE.layout=PatternLayout
    log4perl.appender.LOGFILE.layout.ConversionPattern=[%r] %p %L %c - %m%n

    log4perl.appender.SVCFILE=Log::Log4perl::Appender::File
    log4perl.appender.SVCFILE.filename=/tmp/services.log
    log4perl.appender.SVCFILE.mode=append
    log4perl.appender.SVCFILE.layout=PatternLayout
    log4perl.appender.SVCFILE.layout.ConversionPattern=[%r] %p %L %c - %m%n

=head2 sample 2


=cut
