#!/usr/bin/env perl
use strict;
use warnings;

use Carp;
use ControlFreak::Util;
use File::Spec();
use Getopt::Long;
use Pod::Usage;

my %options = ( address => "unix:/$ENV{HOME}/.controlfreak/sock" );

GetOptions(
    'y|yes'      => \$options{yes},
    'address=s'  => \$options{address},
    'basedir=s'  => \$options{basedir},

    'h|help'     => \$options{help},
    'm|man'      => \$options{man},
) or pod2usage(2);

pod2usage(1)             if $options{help};
pod2usage(-verbose => 2) if $options{man};

my $command = shift || pod2usage(2);

my $socket = ControlFreak::Util::get_sock_from_addr($options{address});
if (! $socket) {
    print STDERR "Cannot get a socket for '$options{address}'\n";
    print STDERR "Maybe you need to start cfkd?\n";
    exit -1;
}

my $cmd = "cmd_$command";

my $commander = ControlFreak::Commander->new(
    basedir => $options{basedir},
    socket  => $socket,
);

if (my $coderef = $commander->can($cmd)) {
    $coderef->($commander, @ARGV);
}
else {
    croak "Sorry unknown command $command";
}

$commander->exit;

package ControlFreak::Commander;
use strict;
use warnings;
use Socket qw($CRLF);
use Carp;

our $has_datetime;
our $has_ansi;
our $can_color;

BEGIN {
    $has_datetime = eval "use DateTime; 1";
    $has_ansi     = eval "use Term::ANSIColor; 1";
    $can_color    = -t STDOUT;
};

sub new {
    my $class = shift;
    return bless { @_ }, $class,
};

sub send_request {
    my $commander = shift;
    my $request = shift;
    my $socket = $commander->{socket};
    $socket->print("$request$CRLF");
}

sub cmd_list {
    my $commander = shift;
    $commander->send_request("command list");
    my ($error, $response) = $commander->read_response;
    croak "error: $error" if $error;
    for (@$response) {
        print "$_\n";
    }
}

sub cmd_version {
    my $commander = shift;
    $commander->send_request("command version");
    my ($error, $response) = $commander->read_response;
    croak "error: $error" if $error;
    for (@$response) {
        print "$_\n";
    }
}

sub send_status_req {
    my $commander = shift;
    my $arg = shift;
    my $statuses = shift;
    $commander->send_request("command status $arg");
    my ($error, $response) = $commander->read_response;
    if ($error) {
        warn "error: $error";
        next;
    }
    $commander->parse_statuses($response, $statuses);
}

sub cmd_status {
    my $commander = shift;
    my @args      = parse_svcs(@_);

    my %statuses;
    @args = ('all') unless @args;
    for (@args) {
        $commander->send_status_req($_, \%statuses);
    }
    for my $svcname (keys %statuses) {
        my %st = %{$statuses{$svcname}};
        my ($uptime, $time);
        if ($st{start_time} && $st{stop_time}) {
            if ($st{start_time} >= $st{stop_time}) {
                $uptime = $st{uptime};
                $time   = $st{str_start_time};
            }
            else {
                $uptime = $st{downtime};
                $time   = $st{str_stop_time};
            }
        }
        elsif ($st{start_time}) {
            $uptime = $st{uptime};
            $time   = $st{str_start_time};
        }
        elsif ($st{stop_time}) {
            $uptime = $st{downtime};
            $time   = $st{str_stop_time};
        }

        $uptime ||= "";
        $time   ||= "";
        if ($time) {
            printf "%-8s %-20s %15s (%s)\n",
                $statuses{$svcname}{status},
                $svcname,
                $uptime,
                $time;
        }
        else {
            printf "%-8s %-30s\n",
                $statuses{$svcname}{status},
                $svcname,
        }
    }
}

sub cmd_proxy_status {
    my $commander = shift;
    $commander->send_request("command proxy_status");

    my $do_color  = $can_color && $has_ansi;

    my ($error, $response) = $commander->read_response;
    if ($error) {
        warn "error: $error";
        next;
    }
    for (reverse @$response) {
        my %st;
        @st{ qw/name status pid/ } = split /\t/, $_;

        my $string_status = my $status = $st{status};

        if ($do_color) {
            my $color;
            if ($status eq "up") {
                $color = "bold green";
            }
            else {
                $color = "bold red";
            }
            $string_status = color($color) . $status . color('reset');
        }
        printf "%-6s %-20s %6s\n", $string_status, $st{name}, ($st{pid} || "");
    }
}

sub parse_statuses {
    my $commander = shift;
    my ($response, $statuses) = @_;

    my $do_color  = $can_color && $has_ansi;

    for (reverse @$response) {
        my %st;
        @st{ qw/svcname status pid start_time stop_time
                proxy fail_reason running_cmd/ } = split /\t/, $_;

        ## remove duplicates
        next if defined $statuses->{ $st{svcname} };

        my $status = $st{status};
        my $string_status = $status;
        if ($do_color) {
            my $color;
            $color = "bold green"  if $status =~ /(starting|running)/;
            $color = "bold yellow" if $status =~ /(stopping|stopped)/;
            $color = "bold red"    if $status =~ /(fail|backoff|fatal)/;
            $string_status = color($color) . $status . color('reset');
        }
        my $name = $st{svcname};
        $statuses->{$name} = \%st;

        $statuses->{$name}{status}     = $string_status;
        $statuses->{$name}{uptime}     = _reltime( $st{start_time} );
        $statuses->{$name}{downtime}   = _reltime( $st{stop_time}  );
        $statuses->{$name}{str_start_time} = scalar localtime( $st{start_time} )
            if $st{start_time};
        $statuses->{$name}{str_stop_time}  = scalar localtime( $st{stop_time} )
            if $st{stop_time};
    }
}

sub _reltime {
    my $time = shift;
    return unless $time;
    return unless $has_datetime;
    my $now  = DateTime->now(time_zone => 'floating');
    my $past = DateTime->from_epoch( epoch => $time, time_zone => 'floating' );

    my $today = $now->truncate(to => 'days')->add( days => 1 );

    my $days  = $today - $past;
    my $ddur  = $days->in_units('days');

    if ( $ddur > 2 ) {
        return sprintf "%2d days ago", $ddur;
    }
    elsif ( $ddur <= 1 ) {
        my $dur = $now - $past;
        my $hdur = $dur->in_units('hours');
        if ($hdur >= 1) {
            return sprintf "%2d hours ago", $hdur;
        }
        my $mdur = $dur->in_units('minutes');
        if ($mdur >= 1) {
            return sprintf "%2d minutes ago", $mdur;
        }
        my $sdur = $dur->in_units('seconds');
        return sprintf "%2d seconds ago", $sdur;
    }
    elsif ( $ddur > 1 ) {
        return "yesterday";
    }
    else { return "what??"; }
}

sub cmd_desc {
    my $commander = shift;
    my @svcrefs   = @_;
    @svcrefs = ('all') unless @svcrefs;
    my @arguments = parse_svcs(@svcrefs);
    my %desc;
    for (@arguments) {
        $commander->send_request("command desc $_");
        my ($error, $response) = $commander->read_response;
        croak "error: $error" if $error;
        for (@$response) {
            my @p = map { s/"/\\"/g; $_ } split /\t/, $_;
            my $svcname = shift @p;
            $desc{$svcname} = {
                tags  => $p[0],
                desc  => $p[1],
                proxy => $p[2],
                cmd   => $p[3],
            };
        }
    }
    for (keys %desc) {
        my %d   = %{$desc{$_}};
        my @out = ("$_:");
        push @out, "tags=\"$d{tags}\""   if $d{tags};
        push @out, "desc=\"$d{desc}\""   if $d{desc};
        push @out, "proxy=\"$d{proxy}\"" if $d{proxy};
        push @out, "cmd=\"$d{cmd}\""     if $d{cmd};
        print join " ", @out, "\n";
    }
    return;
}

sub cmd_pid {
    my $commander = shift;
    my $svc = shift or return;
    my %st;
    $commander->send_status_req("service $svc", \%st);
    my $pid = $st{$svc}{pid};
    print "$pid\n" if $pid;
    return;
}

sub cmd_pids {
    my $commander = shift;
    my @svcrefs   = @_;
    @svcrefs = ('all') unless @svcrefs;
    my @arguments = parse_svcs(@svcrefs);
    my %st;
    for (@arguments) {
        $commander->send_status_req($_, \%st);
    }
    for my $svcname (keys %st) {
        my $pid = $st{$svcname}{pid} || "";
        print "$svcname: $pid\n";
    }
}

sub cmd_shutdown {
    my $commander = shift;
    $commander->send_request("command shutdown");
}

sub cmd_up      { _cmd_svc( "up",      @_ ) }
sub cmd_down    { _cmd_svc( "down",    @_ ) }
sub cmd_stop    { _cmd_svc( "stop",    @_ ) }
sub cmd_start   { _cmd_svc( "start",   @_ ) }
sub cmd_restart { _cmd_svc( "restart", @_ ) }

sub _cmd_svc {
    my $command   = shift;
    my $commander = shift;
    my @svcrefs   = @_;

    my @arguments = parse_svcs(@svcrefs);
    for (@arguments) {
        $commander->send_request("command $command $_");
        my ($error) = $commander->read_response;
        if ($error) {
            croak "error: $error";
        }
    }
}

sub cmd_load {
    my $commander = shift;
    my ($file) = @_;

    my $base = $commander->{basedir}
             || File::Spec->rel2abs(File::Spec->curdir);
    unless (defined $file && length $file) {
        croak "please specify a file to load";
    }
    my $fh;
    if ($file eq '-') {
        $fh = *STDIN;
    }
    else {
        unless (-f $file && -r _) {
            croak "Error, file '$file' is not readable";
        }
        open $fh, "<$file" or croak "Cannot open '$file': $!";
    }
    while (<$fh>) {
        chomp;
        next unless /\S/;   # skip empty lines (void commands)
        next if /^\s*#/;    # skip comments (void commands)
        s/\${BASE}/$base/;  # substitute configured base
        $commander->send_request($_);
        my ($error) = $commander->read_response;
        if ($error) {
            croak "error: $error";
        }
    }
    close $fh unless $file eq '-';
}

sub read_response {
    my $commander = shift;
    my $socket = $commander->{socket};
    my @response;
    my $error;
    while (<$socket>) {
        last unless defined;
        last if /^OK$CRLF/;
        if (/^ERROR: (.*)$CRLF/) {
            $error = $1;
            last;
        }
        chomp;
        push @response, $_;
    }
    return ($error, \@response);
}

sub parse_svcs {
    my @args = @_;

    my @parsed;

    for (@args) {
        if ($_ eq 'all') {
            return ('all');
        }
        if (/^@(.*)$/) {
            push @parsed, "tag $1";
        }
        else {
            push @parsed, "service $_";
        }
    }
    return @parsed;
}

sub exit {
    my $commander = shift;
    $commander->send_request("exit");
    $commander->{socket}->close;
}

__END__

=head1 NAME

cfkctl - control ControlFreak!

=head1 SYNOPSIS

cfkctl [options] command [svcref ...]

 Options:
    -y, --yes           Run non-interactively without asking for confirmations
    -h, --help          Help
    -m, --man           More help
    --basedir=<dir>     change BASE (for the load command)
                        [defaults to current directory]
    --address=SOCK      UNIX or TCP socket to connect to ControlFreak
                        See ADDRESS FORMAT below for more details
                        [defaults to unix://tmp/cfkd.sock]

 Service commands: (take a list of service references in arguments)
    up                  Make sure service(s) is(are) up
    down                Make sure service(s) is(are) down
    stop                Stop the service(s)s
    restart             If service(s) is(are) up, restart
    status              Print status(es) of service(s)
    pids                Print service pid(s)
    desc                Print a description of the service(s)
    destroy             Down a service and deletes it //not implemented yet

 Proxy commands:
    pup <proxy>         Up specified proxy
    pdown <proxy>       Down specified proxy; down any attached service

 Other commands
    pid <service>       Print the pid of the specified service
    list                List all services
    version             Print server's version
    shutdown            Stop everything, including cfkd

 Service references:
    all                 All known services [default]
    svcname             A string of the name of the service
    @tag                All services tagged with the tag C<tag>

  List of possible status returned:
    running             all is well
    starting            should soon be 'running' if all is well
    stopping            should soon be 'stopped' if all is well
    stopped             not ever started, downed or completed
    fail                service terminated abnormally
    fatal               couldn't start the service
    backoff             couldn't start, but will try again


=head1 OPTIONS

Please see L<SYNOPSIS>.

=head1 DESCRIPTION

B<cfkctl> is B<ControlFreak> command line interface, it connects to
the management port and issues commands to it.

This script is intended to manage one instance of B<ControlFreak> running
one one server.

=head1 EXAMPLES

    ## stop everything that is not already stopped
    cfkctl down all

    ## make sure all webs are up (FastCGI processes for instance)
    cfkctl up @webs

    ## list all services
    cfkctl list

    ## status of some services
    cfkctl status
    cfkctl status @webs
    cfkctl status s1

    ## pid of services
    cfkctl pid s1
    cfkctl pids

    ## remove a service reference completely
    cfkctl destroy syncer

=head1 ADDRESS FORMAT

C<cfkctl> can connect to a C<cfkd> process using a UNIX or INET socket,
depending on what the server is running (See C<cfkd> manpage for details
on how to set that up). By default the UNIX socket at C</tmp/cfkd.sock> is
used.

Please look at the following examples to understand the format

=over 4

  /tmp/cfkd.sock            # same as the default (UNIX socket)
  unix:/tmp/cfkd.sock       # same
  tmp/cfkd.sock             # same (not recommended)

  cfkd.sock                 # ambiguous, will resolve to UNIX socket

  127.0.0.1:7000            # TCP socket on localhost port 7000
  yourserver.com:6000       # TCP socket on yourserver.com port 6000

=back
